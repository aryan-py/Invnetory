{"ast":null,"code":"var _jsxFileName = \"/home/aryan/Invnetory/Inventory_management_tool-main/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport LoginPage from \"./components/LoginPage\";\nimport InventoryPage from \"./components/InventoryPage\";\nimport IssuePage from \"./components/IssuePage\";\nimport StudentsPage from './components/StudentsPage';\n\n// Move initial inventory data to App.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialInventory = [{\n  id: 1,\n  name: \"Breadboard\",\n  quantity: 15\n}, {\n  id: 2,\n  name: \"Arduino Uno\",\n  quantity: 10\n}, {\n  id: 3,\n  name: \"Jumper Wires\",\n  quantity: 100\n}, {\n  id: 4,\n  name: \"Resistor Kit\",\n  quantity: 5\n}, {\n  id: 5,\n  name: \"Oscilloscope\",\n  quantity: 3\n}];\n\n// Add initial students data\nconst initialStudents = [];\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentPage, setCurrentPage] = useState('inventory');\n  const [inventory, setInventory] = useState(() => {\n    const savedInventory = localStorage.getItem('inventory');\n    return savedInventory ? JSON.parse(savedInventory) : initialInventory;\n  });\n  const [students, setStudents] = useState(() => {\n    const savedStudents = localStorage.getItem('students');\n    return savedStudents ? JSON.parse(savedStudents) : initialStudents;\n  });\n  const [issuanceHistory, setIssuanceHistory] = useState(() => {\n    const savedHistory = localStorage.getItem('issuanceHistory');\n    return savedHistory ? JSON.parse(savedHistory) : [];\n  });\n\n  // Add new state for tracking last download date\n  const [lastHistoryDownload, setLastHistoryDownload] = useState(() => {\n    return localStorage.getItem('lastHistoryDownload') || null;\n  });\n  useEffect(() => {\n    localStorage.setItem('inventory', JSON.stringify(inventory));\n  }, [inventory]);\n  useEffect(() => {\n    localStorage.setItem('students', JSON.stringify(students));\n  }, [students]);\n  useEffect(() => {\n    localStorage.setItem('issuanceHistory', JSON.stringify(issuanceHistory));\n  }, [issuanceHistory]);\n\n  // Add function to check and download monthly history\n  const checkAndDownloadMonthlyHistory = () => {\n    const now = new Date();\n    const lastDownload = lastHistoryDownload ? new Date(lastHistoryDownload) : null;\n\n    // Check if we need to download (if never downloaded or if it's a new month)\n    if (!lastDownload || lastDownload.getMonth() !== now.getMonth() || lastDownload.getFullYear() !== now.getFullYear()) {\n      // Create CSV header\n      const csvHeader = ['Date', 'Student Name', 'Item Name', 'Quantity', 'Status', 'Return Date'];\n\n      // Create CSV rows\n      const csvRows = issuanceHistory.map(history => {\n        var _students$find, _inventory$find;\n        const studentName = ((_students$find = students.find(s => s.id === history.studentId)) === null || _students$find === void 0 ? void 0 : _students$find.name) || 'Unknown Student';\n        const itemName = ((_inventory$find = inventory.find(i => i.id === history.itemId)) === null || _inventory$find === void 0 ? void 0 : _inventory$find.name) || 'Unknown Item';\n        return [new Date(history.date).toLocaleString(), studentName, itemName, history.quantity, history.status, history.returnDate ? new Date(history.returnDate).toLocaleString() : 'N/A'];\n      });\n\n      // Combine header and rows\n      const csvContent = [csvHeader, ...csvRows].map(row => row.join(',')).join('\\n');\n\n      // Create and trigger download\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n\n      // Format filename with month and year\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      const year = now.getFullYear();\n      const filename = `inventory_history_${year}_${month}.csv`;\n      link.setAttribute('href', url);\n      link.setAttribute('download', filename);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n\n      // Update last download date\n      const newDownloadDate = now.toISOString();\n      setLastHistoryDownload(newDownloadDate);\n      localStorage.setItem('lastHistoryDownload', newDownloadDate);\n    }\n  };\n\n  // Add effect to check for monthly download when app loads\n  useEffect(() => {\n    if (isLoggedIn) {\n      checkAndDownloadMonthlyHistory();\n    }\n  }, [isLoggedIn]); // Only run when login status changes\n\n  // Add effect to check for monthly download periodically\n  useEffect(() => {\n    if (isLoggedIn) {\n      // Check every hour if we need to download\n      const interval = setInterval(() => {\n        checkAndDownloadMonthlyHistory();\n      }, 3600000); // 1 hour in milliseconds\n\n      return () => clearInterval(interval);\n    }\n  }, [isLoggedIn, issuanceHistory]); // Re-run if login status or history changes\n\n  // Add the function to localStorage effects\n  useEffect(() => {\n    localStorage.setItem('lastHistoryDownload', lastHistoryDownload);\n  }, [lastHistoryDownload]);\n  const handleLogin = success => {\n    setIsLoggedIn(success);\n  };\n\n  // Add logout handler\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setCurrentPage('inventory'); // Reset to inventory page for next login\n  };\n  const handleIssueItem = issueData => {\n    // Update inventory when item is issued\n    setInventory(prev => prev.map(item => {\n      if (item.id === parseInt(issueData.itemId)) {\n        return {\n          ...item,\n          quantity: item.quantity - issueData.quantity\n        };\n      }\n      return item;\n    }));\n\n    // Add to issuance history with status\n    const newIssuance = {\n      id: Math.max(0, ...issuanceHistory.map(h => h.id)) + 1,\n      studentId: parseInt(issueData.studentId),\n      itemId: parseInt(issueData.itemId),\n      quantity: issueData.quantity,\n      date: issueData.date,\n      status: 'Issued' // Add status field\n    };\n    setIssuanceHistory(prev => [...prev, newIssuance]);\n    setCurrentPage('inventory');\n  };\n  const handleReturnItem = historyItem => {\n    // Increase inventory quantity\n    setInventory(prev => prev.map(item => {\n      if (item.id === historyItem.itemId) {\n        return {\n          ...item,\n          quantity: item.quantity + historyItem.quantity\n        };\n      }\n      return item;\n    }));\n\n    // Instead of removing, mark as returned in issuance history\n    setIssuanceHistory(prev => prev.map(h => {\n      if (h.id === historyItem.id) {\n        return {\n          ...h,\n          returnDate: new Date().toISOString(),\n          status: 'Returned'\n        };\n      }\n      return h;\n    }));\n  };\n  const handleAddStudent = newStudent => {\n    const newId = Math.max(...students.map(s => s.id)) + 1;\n    setStudents(prev => [...prev, {\n      ...newStudent,\n      id: newId\n    }]);\n  };\n\n  // Update this function to only count unreturned items\n  const getIssuedQuantity = itemId => {\n    return issuanceHistory.reduce((total, issue) => {\n      if (issue.itemId === itemId && issue.status !== 'Returned') {\n        return total + issue.quantity;\n      }\n      return total;\n    }, 0);\n  };\n  if (!isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: currentPage === 'inventory' ? /*#__PURE__*/_jsxDEV(InventoryPage, {\n      inventory: inventory,\n      setInventory: setInventory,\n      onNavigateToIssue: () => setCurrentPage('issue'),\n      onNavigateToStudents: () => setCurrentPage('students'),\n      issuanceHistory: issuanceHistory,\n      getIssuedQuantity: getIssuedQuantity,\n      students: students,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }, this) : currentPage === 'issue' ? /*#__PURE__*/_jsxDEV(IssuePage, {\n      inventory: inventory,\n      students: students // Pass students data\n      ,\n      onIssueItem: handleIssueItem,\n      onBack: () => setCurrentPage('inventory')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(StudentsPage, {\n      students: students,\n      setStudents: setStudents,\n      inventory: inventory // Pass inventory to show item names\n      ,\n      issuanceHistory: issuanceHistory,\n      onReturnItem: handleReturnItem,\n      onBack: () => setCurrentPage('inventory')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"A7ZSmqSilMQtfebg6Z1lgLQD1og=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","LoginPage","InventoryPage","IssuePage","StudentsPage","jsxDEV","_jsxDEV","initialInventory","id","name","quantity","initialStudents","App","_s","isLoggedIn","setIsLoggedIn","currentPage","setCurrentPage","inventory","setInventory","savedInventory","localStorage","getItem","JSON","parse","students","setStudents","savedStudents","issuanceHistory","setIssuanceHistory","savedHistory","lastHistoryDownload","setLastHistoryDownload","setItem","stringify","checkAndDownloadMonthlyHistory","now","Date","lastDownload","getMonth","getFullYear","csvHeader","csvRows","map","history","_students$find","_inventory$find","studentName","find","s","studentId","itemName","i","itemId","date","toLocaleString","status","returnDate","csvContent","row","join","blob","Blob","type","link","document","createElement","url","URL","createObjectURL","month","toString","padStart","year","filename","setAttribute","style","visibility","body","appendChild","click","removeChild","newDownloadDate","toISOString","interval","setInterval","clearInterval","handleLogin","success","handleLogout","handleIssueItem","issueData","prev","item","parseInt","newIssuance","Math","max","h","handleReturnItem","historyItem","handleAddStudent","newStudent","newId","getIssuedQuantity","reduce","total","issue","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onNavigateToIssue","onNavigateToStudents","onLogout","onIssueItem","onBack","onReturnItem","_c","$RefreshReg$"],"sources":["/home/aryan/Invnetory/Inventory_management_tool-main/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport LoginPage from \"./components/LoginPage\";\nimport InventoryPage from \"./components/InventoryPage\";\nimport IssuePage from \"./components/IssuePage\";\nimport StudentsPage from './components/StudentsPage';\n\n// Move initial inventory data to App.js\nconst initialInventory = [\n  { id: 1, name: \"Breadboard\", quantity: 15 },\n  { id: 2, name: \"Arduino Uno\", quantity: 10 },\n  { id: 3, name: \"Jumper Wires\", quantity: 100 },\n  { id: 4, name: \"Resistor Kit\", quantity: 5 },\n  { id: 5, name: \"Oscilloscope\", quantity: 3 },\n];\n\n// Add initial students data\nconst initialStudents = [\n\n];\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [currentPage, setCurrentPage] = useState('inventory');\n  const [inventory, setInventory] = useState(() => {\n    const savedInventory = localStorage.getItem('inventory');\n    return savedInventory ? JSON.parse(savedInventory) : initialInventory;\n  });\n  const [students, setStudents] = useState(() => {\n    const savedStudents = localStorage.getItem('students');\n    return savedStudents ? JSON.parse(savedStudents) : initialStudents;\n  });\n  const [issuanceHistory, setIssuanceHistory] = useState(() => {\n    const savedHistory = localStorage.getItem('issuanceHistory');\n    return savedHistory ? JSON.parse(savedHistory) : [];\n  });\n\n  // Add new state for tracking last download date\n  const [lastHistoryDownload, setLastHistoryDownload] = useState(() => {\n    return localStorage.getItem('lastHistoryDownload') || null;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('inventory', JSON.stringify(inventory));\n  }, [inventory]);\n\n  useEffect(() => {\n    localStorage.setItem('students', JSON.stringify(students));\n  }, [students]);\n\n  useEffect(() => {\n    localStorage.setItem('issuanceHistory', JSON.stringify(issuanceHistory));\n  }, [issuanceHistory]);\n\n  // Add function to check and download monthly history\n  const checkAndDownloadMonthlyHistory = () => {\n    const now = new Date();\n    const lastDownload = lastHistoryDownload ? new Date(lastHistoryDownload) : null;\n    \n    // Check if we need to download (if never downloaded or if it's a new month)\n    if (!lastDownload || \n        lastDownload.getMonth() !== now.getMonth() || \n        lastDownload.getFullYear() !== now.getFullYear()) {\n      \n      // Create CSV header\n      const csvHeader = ['Date', 'Student Name', 'Item Name', 'Quantity', 'Status', 'Return Date'];\n      \n      // Create CSV rows\n      const csvRows = issuanceHistory.map(history => {\n        const studentName = students.find(s => s.id === history.studentId)?.name || 'Unknown Student';\n        const itemName = inventory.find(i => i.id === history.itemId)?.name || 'Unknown Item';\n        \n        return [\n          new Date(history.date).toLocaleString(),\n          studentName,\n          itemName,\n          history.quantity,\n          history.status,\n          history.returnDate ? new Date(history.returnDate).toLocaleString() : 'N/A'\n        ];\n      });\n      \n      // Combine header and rows\n      const csvContent = [\n        csvHeader,\n        ...csvRows\n      ].map(row => row.join(',')).join('\\n');\n      \n      // Create and trigger download\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      \n      // Format filename with month and year\n      const month = (now.getMonth() + 1).toString().padStart(2, '0');\n      const year = now.getFullYear();\n      const filename = `inventory_history_${year}_${month}.csv`;\n      \n      link.setAttribute('href', url);\n      link.setAttribute('download', filename);\n      link.style.visibility = 'hidden';\n      \n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      // Update last download date\n      const newDownloadDate = now.toISOString();\n      setLastHistoryDownload(newDownloadDate);\n      localStorage.setItem('lastHistoryDownload', newDownloadDate);\n    }\n  };\n\n  // Add effect to check for monthly download when app loads\n  useEffect(() => {\n    if (isLoggedIn) {\n      checkAndDownloadMonthlyHistory();\n    }\n  }, [isLoggedIn]); // Only run when login status changes\n\n  // Add effect to check for monthly download periodically\n  useEffect(() => {\n    if (isLoggedIn) {\n      // Check every hour if we need to download\n      const interval = setInterval(() => {\n        checkAndDownloadMonthlyHistory();\n      }, 3600000); // 1 hour in milliseconds\n      \n      return () => clearInterval(interval);\n    }\n  }, [isLoggedIn, issuanceHistory]); // Re-run if login status or history changes\n\n  // Add the function to localStorage effects\n  useEffect(() => {\n    localStorage.setItem('lastHistoryDownload', lastHistoryDownload);\n  }, [lastHistoryDownload]);\n\n  const handleLogin = (success) => {\n    setIsLoggedIn(success);\n  };\n\n  // Add logout handler\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n    setCurrentPage('inventory'); // Reset to inventory page for next login\n  };\n\n  const handleIssueItem = (issueData) => {\n    // Update inventory when item is issued\n    setInventory(prev => prev.map(item => {\n      if (item.id === parseInt(issueData.itemId)) {\n        return {\n          ...item,\n          quantity: item.quantity - issueData.quantity\n        };\n      }\n      return item;\n    }));\n\n    // Add to issuance history with status\n    const newIssuance = {\n      id: Math.max(0, ...issuanceHistory.map(h => h.id)) + 1,\n      studentId: parseInt(issueData.studentId),\n      itemId: parseInt(issueData.itemId),\n      quantity: issueData.quantity,\n      date: issueData.date,\n      status: 'Issued'  // Add status field\n    };\n    setIssuanceHistory(prev => [...prev, newIssuance]);\n    setCurrentPage('inventory');\n  };\n\n  const handleReturnItem = (historyItem) => {\n    // Increase inventory quantity\n    setInventory(prev => prev.map(item => {\n      if (item.id === historyItem.itemId) {\n        return {\n          ...item,\n          quantity: item.quantity + historyItem.quantity\n        };\n      }\n      return item;\n    }));\n\n    // Instead of removing, mark as returned in issuance history\n    setIssuanceHistory(prev => prev.map(h => {\n      if (h.id === historyItem.id) {\n        return {\n          ...h,\n          returnDate: new Date().toISOString(),\n          status: 'Returned'\n        };\n      }\n      return h;\n    }));\n  };\n\n  const handleAddStudent = (newStudent) => {\n    const newId = Math.max(...students.map(s => s.id)) + 1;\n    setStudents(prev => [...prev, { ...newStudent, id: newId }]);\n  };\n\n  // Update this function to only count unreturned items\n  const getIssuedQuantity = (itemId) => {\n    return issuanceHistory.reduce((total, issue) => {\n      if (issue.itemId === itemId && issue.status !== 'Returned') {\n        return total + issue.quantity;\n      }\n      return total;\n    }, 0);\n  };\n\n  if (!isLoggedIn) {\n    return <LoginPage onLogin={handleLogin} />;\n  }\n\n  return (\n    <div className=\"app\">\n      {currentPage === 'inventory' ? (\n        <InventoryPage \n          inventory={inventory}\n          setInventory={setInventory}\n          onNavigateToIssue={() => setCurrentPage('issue')}\n          onNavigateToStudents={() => setCurrentPage('students')}\n          issuanceHistory={issuanceHistory}\n          getIssuedQuantity={getIssuedQuantity}\n          students={students}\n          onLogout={handleLogout}\n        />\n      ) : currentPage === 'issue' ? (\n        <IssuePage \n          inventory={inventory}\n          students={students}  // Pass students data\n          onIssueItem={handleIssueItem}\n          onBack={() => setCurrentPage('inventory')}\n        />\n      ) : (\n        <StudentsPage \n          students={students}\n          setStudents={setStudents}\n          inventory={inventory}  // Pass inventory to show item names\n          issuanceHistory={issuanceHistory}\n          onReturnItem={handleReturnItem}\n          onBack={() => setCurrentPage('inventory')}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}